services:
  db:
    image: mysql:8.4
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - filesharer-network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - filesharer-network

  create-minio-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    entrypoint: /bin/sh -c "
      set -e;
      echo 'Waiting for MinIO...';
      until /usr/bin/mc alias set myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD; do
        echo '... MinIO is not ready yet, retrying in 5 seconds';
        sleep 5;
      done;
      echo 'MinIO is ready.';

      if /usr/bin/mc ls myminio/$$S3_BUCKET_NAME > /dev/null 2>&1; then
        echo 'Bucket \"$$S3_BUCKET_NAME\" already exists.';
      else
        echo 'Creating bucket \"$$S3_BUCKET_NAME\"...';
        /usr/bin/mc mb myminio/$$S3_BUCKET_NAME;
        echo 'Bucket \"$$S3_BUCKET_NAME\" created.';
      fi;
      exit 0;
      "
    networks:
      - filesharer-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8443:443"
    env_file:
      - ./frontend/.env     # 只讀取前端專用配置
    depends_on:
      - backend
    networks:
      - filesharer-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./.env              # 讀取根目錄的共用配置（資料庫、存儲）
      - ./backend/.env      # 讀取後端專用配置
    depends_on:
      create-minio-bucket:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - filesharer-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  minio_data:
    driver: local

networks:
  filesharer-network:
    driver: bridge
