# --- Stage 1: Build Stage ---
# 使用官方的 Node.js LTS (長期支援) 版本作為建置環境的基礎映像檔
FROM node:20-alpine AS build

# 設定工作目錄
WORKDIR /app

# 複製 package.json 和 lock 檔案 (例如 package-lock.json, yarn.lock, pnpm-lock.yaml)
# 利用 Docker 的快取機制，只有在這些檔案變更時才會重新安裝依賴
COPY package*.json ./
# 如果使用 yarn 或 pnpm，請取消註解對應的行
# COPY yarn.lock ./
# COPY pnpm-lock.yaml ./

# 安裝專案依賴
RUN npm install
# 如果使用 yarn: RUN yarn install
# 如果使用 pnpm: RUN npm install -g pnpm && pnpm install

# 複製專案的其餘原始碼
COPY . .

# 執行建置命令，將應用程式編譯成靜態檔案
# 'build' 是在 package.json -> "scripts" 中定義的命令
RUN npm run build

# --- Stage 2: Production Stage ---
# 使用官方的 Nginx (一個高效能的網頁伺服器) 的輕量級版本作為最終映像檔
FROM nginx:1.27-alpine

# 將 Nginx 的預設設定檔移除
RUN rm /etc/nginx/conf.d/default.conf

# 從 Stage 1 (build stage) 複製我們自訂的 Nginx 設定檔
COPY nginx.conf /etc/nginx/conf.d/default.conf

# 設定網站根目錄
WORKDIR /usr/share/nginx/html

# 清空 Nginx 預設的內容
RUN rm -rf ./*

# 從 Stage 1 (build stage) 複製建置好的靜態檔案到 Nginx 的網站根目錄
# 在 React/Vue/Angular 中，建置產物通常在 'dist' 或 'build' 資料夾
COPY --from=build /app/dist .
# 如果您的建置產出資料夾是 'build'，請使用下面這行
# COPY --from=build /app/build .

# 開放 80 連接埠，讓外部可以存取 Nginx
EXPOSE 80

# 啟動 Nginx 伺服器並保持在前台運行
ENTRYPOINT ["nginx", "-g", "daemon off;"]